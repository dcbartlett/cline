name: Changeset - Process Version Bump PR
run-name: Changeset - Process Version Bump PR for #${{ github.event.pull_request.number }}

on:
    pull_request:
        types: [opened, labeled] # Trigger when a PR is opened or labeled

env:
    NODE_VERSION: 20.18.1

jobs:
    # Job to process the version bump PR created by github-actions
    changeset-pr-edit-approve:
        name: Auto approve and merge Bump version PRs
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        # IMPORTANT: Only run for PRs opened/labeled by github-actions with the specific title
        # Only run for PRs opened/labeled by github-actions with the specific title
        if: >
            github.event.pull_request.base.ref == 'main' &&
            github.actor == 'github-actions' &&
            contains(github.event.pull_request.title, 'Changeset version bump')
        steps:
            # Determine checkout ref based on event (opened vs labeled)
            - name: Determine checkout ref
              id: checkout-ref
              run: |
                  echo "Event action: ${{ github.event.action }}"
                  echo "Actor: ${{ github.actor }}" # Should be github-actions if 'if' condition passed
                  echo "Head ref: ${{ github.head_ref }}"
                  echo "PR SHA: ${{ github.event.pull_request.head.sha }}"

                  # When the PR is first 'opened' by github-actions, checkout the branch
                  # When it's 'labeled' later, checkout the specific commit SHA
                  if [[ "${{ github.event.action }}" == "opened" ]]; then
                    echo "Using branch ref: ${{ github.head_ref }}"
                    echo "git_ref=${{ github.head_ref }}" >> $GITHUB_OUTPUT
                  else
                    # For labeled events or others, use the specific commit SHA
                    echo "Using SHA ref: ${{ github.event.pull_request.head.sha }}"
                    echo "git_ref=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
                  fi

            - name: Checkout Repo
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for checkout
                  fetch-depth: 0
                  ref: ${{ steps.checkout-ref.outputs.git_ref }}

            # Get current and previous versions to edit changelog entry
            - name: Get version
              id: get_version
              run: |
                  VERSION=$(git show HEAD:package.json | jq -r '.version')
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  PREV_VERSION=$(git show origin/main:package.json | jq -r '.version')
                  echo "prev_version=$PREV_VERSION" >> $GITHUB_OUTPUT
                  echo "version=$VERSION"
                  echo "prev_version=$PREV_VERSION"

            # Update CHANGELOG.md with proper format (only if not already done)
            - name: Update Changelog Format
              if: ${{ !contains(github.event.pull_request.labels.*.name, 'changelog-ready') }}
              env:
                  VERSION: ${{ steps.get_version.outputs.version }}
                  PREV_VERSION: ${{ steps.get_version.outputs.prev_version }}
              run: python .github/scripts/overwrite_changeset_changelog.py

            # Commit and push changelog updates
            - name: Push Changelog updates
              if: ${{ !contains(github.event.pull_request.labels.*.name, 'changelog-ready') }}
              run: |
                  git config user.name "github-actions"
                  git config user.email github-actions@github.com
                  echo "Running git add and commit..."
                  git add CHANGELOG.md
                  git commit -m "Updating CHANGELOG.md format"
                  git status
                  echo "--------------------------------------------------------------------------------"
                  echo "Pushing to remote..."
                  echo "--------------------------------------------------------------------------------"
                  git push

            # Add label to indicate changelog has been formatted
            - name: Add changelog-ready label
              if: ${{ !contains(github.event.pull_request.labels.*.name, 'changelog-ready') }}
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      await github.rest.issues.addLabels({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        labels: ['changelog-ready']
                      });

            # Auto-approve PR only after it has been labeled 'changelog-ready'
            # This step will run again if the 'labeled' event triggers the workflow
            - name: Auto approve PR
              if: contains(github.event.pull_request.labels.*.name, 'changelog-ready')
              uses: hmarr/auto-approve-action@v4
              with:
                  review-message: "Auto-approved: Changeset version bump PR with formatted changelog."

            # Auto-merge PR
            - name: Automerge on PR
              if: false # Needs enablePullRequestAutoMerge in repo settings to work contains(github.event.pull_request.labels.*.name, 'changelog-ready')
              run: gh pr merge --auto --merge ${{ github.event.pull_request.number }}
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
